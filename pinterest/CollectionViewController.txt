class CollectionViewController: UICollectionVIewController, UICollectionViewDelegateFlowLayout {
	let cellIdentifier = "celda"
	override func viewDidLoad(){
		super.viewDidLoad()
		
		collectionView?.backgroundColor = UIColor.whiteColor()
		
		collectionView?.registerClass(CustomCell.self, forCellWithReuseIdentifier: cellIdentifier)
		
	}
	
	let names = ["Mark", "Joe", "Lucas"]
	
	override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell{
		let customCell = collectionView.dequeueReusableCellWithReuseIdentifier(cellIdentifier, forIndexPath: indexPath) as! CustomCell
		customCell.nameLabel.text = names[indexPath.item]
		return customCell
	}
	
	override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return names.count
	}
	
	func collectionView(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize {
		return CGSizeMake(view.frame.width, 200)
	}
	
}

class CustomCell: UICollectionViewCell {
	override init(frame: CGRect){
		super.init(frame: frame)
		setupView()
	}
	
	let nameLabel: UILabel = {
		let label = UILabel()
		label.text = "Custom text"
		label.translatesAutoresizingMaskIntoConstraints = false
		return label
	}()
	
	func setupViews(){
	backgroundColor = UIColor.redColor()
	
		addSubview(nameLabel)
		addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:|-16-[v0]|", options: NSLayoutFormatOptions(), metrics: nil, views: ["v0": nameLabel]))
		addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:|[v0]|", options: NSLayoutFormatOPtions(), metrics: nil, views: ["v0": nameLabel]))
	}
	
	required init?(coder aDecoder: NSCoder){
		fatalError("init(coder:) has not been implemented")
	}
	
}